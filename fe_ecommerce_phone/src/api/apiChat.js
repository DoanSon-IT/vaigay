import axiosInstance from "./axiosConfig";

const apiChat = {
    // üí¨ L·∫•y l·ªãch s·ª≠ gi·ªØa kh√°ch h√†ng v√† h·ªá th·ªëng (cho admin xem)
    getChatHistory: async (customerId) => {
        try {
            const res = await axiosInstance.get("/chat/history", { params: { customerId } });
            return res.data;
        } catch {
            return [];
        }
    },

    // üí¨ L·∫•y l·ªãch s·ª≠ chat c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
    getMyChatHistory: async () => {
        try {
            const res = await axiosInstance.get("/chat/my-history");
            return res.data;
        } catch {
            return [];
        }
    },

    // ‚úÖ ƒê√°nh d·∫•u 1 tin nh·∫Øn l√† ƒë√£ ƒë·ªçc
    markAsRead: async (messageId) => {
        try {
            await axiosInstance.post("/chat/mark-as-read", null, { params: { messageId } });
            console.log(`‚úÖ Tin nh·∫Øn ${messageId} ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc.`);
        } catch (error) {
            console.error("‚ùå L·ªói khi ƒë√°nh d·∫•u tin nh·∫Øn:", error);
        }
    },

    // ü§ñ G·ª≠i c√¢u h·ªèi t·ªõi chatbot AI
    askBot: async (userId, message) => {
        try {
            const res = await axiosInstance.post("/chatbot/ask", { userId, message });
            return res.data;
        } catch (error) {
            console.error("‚ùå L·ªói khi g·ªçi chatbot:", error);
            return { reply: "Em xin l·ªói, hi·ªán t·∫°i ƒëang l·ªói k·∫øt n·ªëi ƒë·∫øn tr·ª£ l√Ω ·∫£o." };
        }
    },

    // üìã L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ l·ªãch s·ª≠ chat (admin)
    getAllChatUsers: async () => {
        try {
            const res = await axiosInstance.get("/chat/users");
            return res.data;
        } catch (err) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng chat:", err);
            return [];
        }
    },

    // üì§ G·ª≠i tin nh·∫Øn t·ª´ admin/staff ƒë·∫øn 1 kh√°ch h√†ng c·ª• th·ªÉ
    sendMessageToCustomer: async (receiverId, message) => {
        try {
            const res = await axiosInstance.post("/chat/send-to-customer", null, {
                params: { receiverId, message }
            });
            return res.data;
        } catch (err) {
            console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn kh√°ch:", err);
            throw err;
        }
    },

    // üì§ G·ª≠i tin nh·∫Øn t·ª´ kh√°ch h√†ng ƒë·∫øn admin/staff
    sendMessageToAgent: async (message) => {
        try {
            const res = await axiosInstance.post("/chat/send-to-agent", null, {
                params: { message }
            });
            return res.data;
        } catch (err) {
            console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn nh√¢n vi√™n:", err);
            throw err;
        }
    },

    // üìä L·∫•y s·ªë l∆∞·ª£ng tin nh·∫Øn ch∆∞a ƒë·ªçc (admin)
    getUnreadMessageCount: async () => {
        try {
            const res = await axiosInstance.get("/chat/unread-count");
            return res.data;
        } catch (err) {
            console.error("‚ùå L·ªói khi l·∫•y s·ªë l∆∞·ª£ng tin nh·∫Øn ch∆∞a ƒë·ªçc:", err);
            return {};
        }
    },

    // üì∏ Upload ·∫£nh l√™n √¥ chat
    uploadImage: async (file) => {
        try {
            const formData = new FormData();
            formData.append("image", file);
            const res = await axiosInstance.post("/chat/upload-image", formData, {
                headers: { "Content-Type": "multipart/form-data" }
            });
            return res.data;
        } catch (err) {
            console.error("‚ùå L·ªói khi upload ·∫£nh:", err);
            throw err;
        }
    }
};

export default apiChat;