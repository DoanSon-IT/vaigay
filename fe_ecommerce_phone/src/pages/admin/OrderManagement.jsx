import React, { useState, useEffect, useContext, useCallback } from "react";
import apiOrder from "../../api/apiOrder";
import apiInventory from "../../api/apiInventory";
import AppContext from "../../context/AppContext";
import { useNavigate } from "react-router-dom";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { debounce } from 'lodash';
import ExportBillButton from "../../components/admin/ExportBillButton";

const OrderManagement = () => {
    const { auth } = useContext(AppContext);
    const navigate = useNavigate();
    const [orders, setOrders] = useState([]);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isUpdatingStatus, setIsUpdatingStatus] = useState(false);
    const [error, setError] = useState("");
    const [isModalOpen, setIsModalOpen] = useState(false);

    // Ph√¢n trang v√† l·ªçc
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [pageSize, setPageSize] = useState(10);
    const [totalOrders, setTotalOrders] = useState(0);
    const [sortField, setSortField] = useState("createdAt");
    const [sortDirection, setSortDirection] = useState("desc");

    // Auto-refresh
    const [autoRefresh, setAutoRefresh] = useState(true);
    const [refreshInterval, setRefreshInterval] = useState(null);

    // B·ªô l·ªçc
    const [filters, setFilters] = useState({
        status: "",
        paymentStatus: "",
        customerName: "",
        startDate: "",
        endDate: "",
        orderId: ""
    });

    // ƒê·ªãnh nghƒ©a fetchOrders tr∆∞·ªõc
    const fetchOrders = useCallback(async () => {
        setIsLoading(true);
        try {
            // Chu·∫©n b·ªã tham s·ªë truy v·∫•n
            const queryParams = {
                page: currentPage,
                size: pageSize,
                sort: sortField,
                direction: sortDirection,
                ...filters
            };

            const response = await apiOrder.getPaginatedOrders(queryParams);
            console.log("üì¶ Orders response:", response);
            console.log("üì¶ First order payment:", response.content?.[0]?.payment);
            console.log("üì¶ Payment status mapping:", response.content?.map(order => ({
                orderId: order.id,
                paymentMethod: order.payment?.paymentMethod,
                paymentStatus: order.payment?.status,
                transactionId: order.payment?.transactionId
            })));
            setOrders(response.content);
            setTotalPages(response.totalPages);
            setTotalOrders(response.totalElements);

        } catch (err) {
            setError(err.message);
            toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng: " + err.message);
        } finally {
            setIsLoading(false);
        }
    }, [currentPage, pageSize, sortField, sortDirection, filters]);

    // Debounce t√¨m ki·∫øm ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c - gi·∫£m th·ªùi gian ƒë·ªÉ ph·∫£n h·ªìi nhanh h∆°n
    const debouncedFetchOrders = useCallback(
        debounce(() => {
            fetchOrders();
        }, 300),
        [fetchOrders]
    );

    useEffect(() => {
        if (!auth) {
            navigate("/auth/login");
        } else {
            debouncedFetchOrders();
        }
    }, [auth, navigate, currentPage, pageSize, sortField, sortDirection, debouncedFetchOrders]);

    // Auto-refresh effect - ch·ªâ refresh khi kh√¥ng c√≥ thao t√°c ƒëang di·ªÖn ra
    useEffect(() => {
        if (autoRefresh) {
            const interval = setInterval(() => {
                // Ch·ªâ refresh khi kh√¥ng c√≥ thao t√°c ƒëang di·ªÖn ra
                if (!isLoading && !isUpdatingStatus) {
                    fetchOrders();
                }
            }, 30000); // Refresh m·ªói 30 gi√¢y
            setRefreshInterval(interval);
            return () => clearInterval(interval);
        } else {
            if (refreshInterval) {
                clearInterval(refreshInterval);
                setRefreshInterval(null);
            }
        }
    }, [autoRefresh, fetchOrders, isLoading, isUpdatingStatus]);

    const formatPaymentMethod = (method) => {
        switch (method) {
            case "COD": return "Thanh to√°n khi nh·∫≠n h√†ng";
            case "VNPAY": return "Thanh to√°n qua VNPAY";
            case "MOMO": return "Thanh to√°n qua MOMO";
            default: return "Ch∆∞a c√≥ th√¥ng tin";
        }
    };

    // H√†m format payment status
    const getPaymentStatusText = (status) => {
        switch (status) {
            case "PENDING": return "Ch·ªù thanh to√°n";
            case "PROCESSING": return "ƒêang x·ª≠ l√Ω";
            case "PAID": return "ƒê√£ thanh to√°n";
            case "AWAITING_DELIVERY": return "Ch·ªù giao h√†ng";
            case "FAILED": return "Th·∫•t b·∫°i";
            case "CANCELLED": return "ƒê√£ h·ªßy";
            default: return status || "N/A";
        }
    };

    // H√†m l·∫•y m√†u cho payment status
    const getPaymentStatusColor = (status) => {
        switch (status) {
            case "PAID": return "bg-green-100 text-green-800 border-green-200";
            case "AWAITING_DELIVERY": return "bg-blue-100 text-blue-800 border-blue-200";
            case "PENDING": return "bg-yellow-100 text-yellow-800 border-yellow-200";
            case "PROCESSING": return "bg-purple-100 text-purple-800 border-purple-200";
            case "FAILED": return "bg-red-100 text-red-800 border-red-200";
            case "CANCELLED": return "bg-gray-100 text-gray-800 border-gray-200";
            default: return "bg-gray-100 text-gray-600 border-gray-200";
        }
    };

    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters(prev => ({
            ...prev,
            [name]: value
        }));
        setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu khi thay ƒë·ªïi b·ªô l·ªçc
    };

    const handleSort = (field) => {
        if (sortField === field) {
            setSortDirection(sortDirection === "asc" ? "desc" : "asc");
        } else {
            setSortField(field);
            setSortDirection("desc"); // M·∫∑c ƒë·ªãnh l√† gi·∫£m d·∫ßn khi ch·ªçn tr∆∞·ªùng m·ªõi
        }
        setCurrentPage(1);
    };

    const clearFilters = () => {
        setFilters({
            status: "",
            paymentStatus: "",
            customerName: "",
            startDate: "",
            endDate: "",
            orderId: ""
        });
        setCurrentPage(1);
    };

    const handleViewDetails = async (orderId) => {
        try {
            const order = await apiOrder.getOrderById(orderId);
            setSelectedOrder(order);
            setIsModalOpen(true);
        } catch (err) {
            setError(err.message);
            toast.error(err.message);
        }
    };

    const handleUpdateStatus = async (orderId, newStatus) => {
        // Optimistic update - c·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
        const previousOrders = [...orders];
        const previousSelectedOrder = selectedOrder;

        // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y ph·∫£n h·ªìi nhanh
        setOrders(orders.map(order =>
            order.id === orderId ? { ...order, status: newStatus } : order
        ));

        if (selectedOrder && selectedOrder.id === orderId) {
            setSelectedOrder({ ...selectedOrder, status: newStatus });
        }

        try {
            setIsUpdatingStatus(true);
            const response = await apiOrder.updateOrderStatus(orderId, newStatus);
            if (!response || !response.orderDetails) {
                throw new Error("D·ªØ li·ªáu ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá");
            }

            if (newStatus === "CANCELLED") {
                await Promise.all(
                    response.orderDetails.map(async (detail) => {
                        await apiInventory.adjustInventory(detail.product.id, detail.quantity, "Ho√†n h√†ng do h·ªßy ƒë∆°n");
                    })
                );
            }

            // Refetch data ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ch√≠nh x√°c t·ª´ server
            await fetchOrders();
            toast.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");

            // C·∫≠p nh·∫≠t selectedOrder v·ªõi d·ªØ li·ªáu m·ªõi nh·∫•t
            if (selectedOrder && selectedOrder.id === orderId) {
                try {
                    const updatedOrder = await apiOrder.getOrderById(orderId);
                    setSelectedOrder(updatedOrder);
                } catch (err) {
                    console.error("L·ªói khi c·∫≠p nh·∫≠t chi ti·∫øt ƒë∆°n h√†ng:", err);
                }
            }
        } catch (err) {
            // Rollback optimistic update n·∫øu c√≥ l·ªói
            setOrders(previousOrders);
            if (previousSelectedOrder) {
                setSelectedOrder(previousSelectedOrder);
            }
            toast.error(err.message || "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i");
        } finally {
            setIsUpdatingStatus(false);
        }
    };

    const handleDeleteOrder = async (orderId) => {
        const orderToDelete = orders.find((order) => order.id === orderId);
        if (orderToDelete.status !== "CANCELLED") {
            toast.warn("Ch·ªâ c√≥ th·ªÉ x√≥a ƒë∆°n h√†ng ƒë√£ h·ªßy!");
            return;
        }
        if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë∆°n h√†ng n√†y?")) {
            try {
                await apiOrder.deleteOrder(orderId);

                // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi x√≥a
                fetchOrders();

                if (selectedOrder && selectedOrder.id === orderId) {
                    setSelectedOrder(null);
                    setIsModalOpen(false);
                }
                toast.success("X√≥a ƒë∆°n h√†ng th√†nh c√¥ng!");
            } catch (err) {
                setError(err.message);
                toast.error(err.message);
            }
        }
    };

    const getStatusText = (status) => {
        switch (status) {
            case "PENDING": return "ƒêang x·ª≠ l√Ω";
            case "CONFIRMED": return "ƒê√£ x√°c nh·∫≠n";
            case "SHIPPED": return "ƒêang giao";
            case "COMPLETED": return "ƒê√£ giao";
            case "CANCELLED": return "ƒê√£ h·ªßy";
            default: return status;
        }
    };

    const handlePageChange = (page) => {
        setCurrentPage(page);
    };

    const handlePageSizeChange = (e) => {
        setPageSize(parseInt(e.target.value));
        setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu khi thay ƒë·ªïi k√≠ch th∆∞·ªõc trang
    };

    // T√≠nh to√°n s·ªë l∆∞·ª£ng ƒë∆°n h√†ng ƒëang hi·ªÉn th·ªã
    const startItem = (currentPage - 1) * pageSize + 1;
    const endItem = Math.min(currentPage * pageSize, totalOrders);

    return (
        <div className="p-6">
            <h2 className="text-2xl font-semibold mb-6">Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>

            {/* Khu v·ª±c b·ªô l·ªçc */}
            <div className="bg-white p-4 mb-6 rounded-lg shadow-md">
                {/* Auto-refresh toggle */}
                <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-medium text-gray-900">B·ªô l·ªçc ƒë∆°n h√†ng</h3>
                    <div className="flex items-center space-x-2">
                        <span className="text-sm text-gray-600">T·ª± ƒë·ªông l√†m m·ªõi (30s):</span>
                        <button
                            onClick={() => setAutoRefresh(!autoRefresh)}
                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${autoRefresh ? 'bg-green-600' : 'bg-gray-200'
                                }`}
                        >
                            <span
                                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${autoRefresh ? 'translate-x-6' : 'translate-x-1'
                                    }`}
                            />
                        </button>
                        <button
                            onClick={fetchOrders}
                            className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
                            title="L√†m m·ªõi ngay"
                        >
                            üîÑ
                        </button>
                    </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">M√£ ƒë∆°n h√†ng</label>
                        <input
                            type="text"
                            name="orderId"
                            value={filters.orderId}
                            onChange={handleFilterChange}
                            placeholder="Nh·∫≠p m√£ ƒë∆°n h√†ng"
                            className="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">T√™n kh√°ch h√†ng</label>
                        <input
                            type="text"
                            name="customerName"
                            value={filters.customerName}
                            onChange={handleFilterChange}
                            placeholder="Nh·∫≠p t√™n kh√°ch h√†ng"
                            className="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Tr·∫°ng th√°i ƒë∆°n h√†ng</label>
                        <select
                            name="status"
                            value={filters.status}
                            onChange={handleFilterChange}
                            className="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
                        >
                            <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                            <option value="PENDING">ƒêang x·ª≠ l√Ω</option>
                            <option value="CONFIRMED">ƒê√£ x√°c nh·∫≠n</option>
                            <option value="SHIPPED">ƒêang giao</option>
                            <option value="COMPLETED">ƒê√£ giao</option>
                            <option value="CANCELLED">ƒê√£ h·ªßy</option>
                        </select>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Tr·∫°ng th√°i thanh to√°n</label>
                        <select
                            name="paymentStatus"
                            value={filters.paymentStatus}
                            onChange={handleFilterChange}
                            className="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
                        >
                            <option value="">T·∫•t c·∫£ thanh to√°n</option>
                            <option value="PENDING">Ch·ªù thanh to√°n</option>
                            <option value="PROCESSING">ƒêang x·ª≠ l√Ω</option>
                            <option value="PAID">ƒê√£ thanh to√°n</option>
                            <option value="AWAITING_DELIVERY">Ch·ªù giao h√†ng</option>
                            <option value="FAILED">Th·∫•t b·∫°i</option>
                            <option value="CANCELLED">ƒê√£ h·ªßy</option>
                        </select>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">T·ª´ ng√†y</label>
                        <input
                            type="date"
                            name="startDate"
                            value={filters.startDate}
                            onChange={handleFilterChange}
                            className="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">ƒê·∫øn ng√†y</label>
                        <input
                            type="date"
                            name="endDate"
                            value={filters.endDate}
                            onChange={handleFilterChange}
                            className="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
                        />
                    </div>
                </div>
                <div className="mt-4 flex justify-end">
                    <button
                        onClick={clearFilters}
                        className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 mr-2"
                    >
                        X√≥a b·ªô l·ªçc
                    </button>
                    <button
                        onClick={fetchOrders}
                        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                    >
                        T√¨m ki·∫øm
                    </button>
                </div>
            </div>

            {error && (
                <div className="mb-4 p-4 bg-red-100 text-red-700 rounded-lg">
                    {error}
                    <button
                        className="float-right"
                        onClick={() => setError("")}
                    >
                        ‚úï
                    </button>
                </div>
            )}

            {/* Th√¥ng b√°o ƒëang c·∫≠p nh·∫≠t tr·∫°ng th√°i */}
            {isUpdatingStatus && (
                <div className="mb-4 p-3 bg-blue-100 text-blue-700 rounded-lg flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-500 border-t-transparent mr-2"></div>
                    ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng...
                </div>
            )}

            {/* Th√¥ng tin ph√¢n trang */}
            <div className="flex flex-col sm:flex-row justify-between items-center mb-4">
                <div className="mb-2 sm:mb-0">
                    <span className="text-gray-600">
                        Hi·ªÉn th·ªã {orders.length ? startItem : 0}-{endItem} tr√™n {totalOrders} ƒë∆°n h√†ng
                    </span>
                </div>
                <div className="flex items-center">
                    <span className="mr-2 text-gray-600">S·ªë d√≤ng m·ªói trang:</span>
                    <select
                        value={pageSize}
                        onChange={handlePageSizeChange}
                        className="mr-4 p-1 border rounded-md"
                    >
                        <option value={5}>5</option>
                        <option value={10}>10</option>
                        <option value={20}>20</option>
                        <option value={50}>50</option>
                    </select>
                </div>
            </div>

            {isLoading ? (
                <div className="flex justify-center items-center h-64">
                    <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-500 border-t-transparent"></div>
                </div>
            ) : (
                <div className="overflow-x-auto rounded-lg shadow-md">
                    <table className="min-w-full bg-white border">
                        <thead className="bg-gray-100">
                            <tr>
                                <th
                                    className="p-3 text-left cursor-pointer hover:bg-gray-200"
                                    onClick={() => handleSort("id")}
                                >
                                    <div className="flex items-center">
                                        M√£ ƒë∆°n h√†ng
                                        {sortField === "id" && (
                                            <span className="ml-1">
                                                {sortDirection === "asc" ? "‚Üë" : "‚Üì"}
                                            </span>
                                        )}
                                    </div>
                                </th>
                                <th className="p-3 text-left">Kh√°ch h√†ng</th>
                                <th
                                    className="p-3 text-left cursor-pointer hover:bg-gray-200"
                                    onClick={() => handleSort("createdAt")}
                                >
                                    <div className="flex items-center">
                                        Ng√†y ƒë·∫∑t
                                        {sortField === "createdAt" && (
                                            <span className="ml-1">
                                                {sortDirection === "asc" ? "‚Üë" : "‚Üì"}
                                            </span>
                                        )}
                                    </div>
                                </th>
                                <th
                                    className="p-3 text-left cursor-pointer hover:bg-gray-200"
                                    onClick={() => handleSort("totalPrice")}
                                >
                                    <div className="flex items-center">
                                        T·ªïng ti·ªÅn
                                        {sortField === "totalPrice" && (
                                            <span className="ml-1">
                                                {sortDirection === "asc" ? "‚Üë" : "‚Üì"}
                                            </span>
                                        )}
                                    </div>
                                </th>
                                <th
                                    className="p-3 text-left cursor-pointer hover:bg-gray-200"
                                    onClick={() => handleSort("status")}
                                >
                                    <div className="flex items-center">
                                        Tr·∫°ng th√°i ƒë∆°n h√†ng
                                        {sortField === "status" && (
                                            <span className="ml-1">
                                                {sortDirection === "asc" ? "‚Üë" : "‚Üì"}
                                            </span>
                                        )}
                                    </div>
                                </th>
                                <th className="p-3 text-left">Thanh to√°n</th>
                                <th className="p-3 text-center">Thao t√°c</th>
                            </tr>
                        </thead>
                        <tbody>
                            {orders.length > 0 ? (
                                orders.map((order) => (
                                    <tr key={order.id} className="border-b hover:bg-gray-50 transition-colors">
                                        <td className="p-3 font-medium">#{order.id}</td>
                                        <td className="p-3">
                                            <div>{order.customer?.fullName || "N/A"}</div>
                                            <div className="text-xs text-gray-500">{order.customer?.email || ""}</div>
                                        </td>
                                        <td className="p-3">
                                            <div>{new Date(order.createdAt).toLocaleDateString('vi-VN')}</div>
                                            <div className="text-xs text-gray-500">{new Date(order.createdAt).toLocaleTimeString('vi-VN')}</div>
                                        </td>
                                        <td className="p-3 font-medium">{order.totalPrice.toLocaleString()} VND</td>
                                        <td className="p-3">
                                            <span
                                                className={`px-2 py-1 rounded-full text-sm ${order.status === "COMPLETED"
                                                    ? "bg-green-100 text-green-800"
                                                    : order.status === "PENDING"
                                                        ? "bg-yellow-100 text-yellow-800"
                                                        : order.status === "CONFIRMED"
                                                            ? "bg-purple-100 text-purple-800"
                                                            : order.status === "SHIPPED"
                                                                ? "bg-blue-100 text-blue-800"
                                                                : "bg-red-100 text-red-800"
                                                    }`}
                                            >
                                                {getStatusText(order.status)}
                                            </span>
                                        </td>
                                        <td className="p-3">
                                            <div className="space-y-1">
                                                <span
                                                    className={`px-2 py-1 rounded-full text-xs border ${getPaymentStatusColor(order.payment?.status)}`}
                                                >
                                                    {getPaymentStatusText(order.payment?.status)}
                                                </span>
                                                <div className="text-xs text-gray-500">
                                                    {formatPaymentMethod(order.payment?.paymentMethod)}
                                                </div>
                                            </div>
                                        </td>
                                        <td className="p-3">
                                            <div className="flex justify-center space-x-2 flex-wrap gap-1">
                                                <button
                                                    onClick={() => handleViewDetails(order.id)}
                                                    className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                                                    title="Xem chi ti·∫øt"
                                                >
                                                    Chi ti·∫øt
                                                </button>

                                                <div className="relative group">
                                                    <button
                                                        className={`px-3 py-1 text-white rounded transition-colors ${isUpdatingStatus
                                                            ? "bg-gray-400 cursor-not-allowed"
                                                            : "bg-green-500 hover:bg-green-600"
                                                            }`}
                                                        title="C·∫≠p nh·∫≠t tr·∫°ng th√°i"
                                                        disabled={isUpdatingStatus}
                                                    >
                                                        {isUpdatingStatus ? "ƒêang c·∫≠p nh·∫≠t..." : "Tr·∫°ng th√°i"}
                                                    </button>

                                                    {/* Pseudo element gi·ªØ hover kh√¥ng b·ªã nh·∫£y */}
                                                    <div className="absolute top-full left-0 w-full h-2 bg-transparent pointer-events-none"></div>

                                                    {/* Dropdown */}
                                                    <div className={`absolute z-10 right-0 top-full mt-1 w-40 bg-white rounded-md shadow-lg border ${isUpdatingStatus ? "hidden" : "hidden group-hover:block"
                                                        }`}>
                                                        <div className="py-1">
                                                            {["PENDING", "CONFIRMED", "SHIPPED", "COMPLETED", "CANCELLED"].map((status) => (
                                                                <button
                                                                    key={status}
                                                                    onClick={() => handleUpdateStatus(order.id, status)}
                                                                    className={`block px-4 py-2 text-sm w-full text-center ${isUpdatingStatus
                                                                        ? "text-gray-400 cursor-not-allowed"
                                                                        : "text-gray-700 hover:bg-gray-100"
                                                                        }`}
                                                                    disabled={isUpdatingStatus}
                                                                >
                                                                    {getStatusText(status)}
                                                                </button>
                                                            ))}
                                                        </div>
                                                    </div>
                                                </div>

                                                {/* N√∫t xu·∫•t h√≥a ƒë∆°n */}
                                                <ExportBillButton
                                                    order={order}
                                                    variant="primary"
                                                    size="small"
                                                />

                                                <button
                                                    onClick={() => handleDeleteOrder(order.id)}
                                                    className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
                                                    title="X√≥a ƒë∆°n h√†ng"
                                                    disabled={order.status !== "CANCELLED"}
                                                >
                                                    X√≥a
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan="7" className="p-5 text-center text-gray-500">
                                        Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>
            )}

            {/* Ph√¢n trang */}
            {totalPages > 1 && (
                <div className="flex justify-center mt-6">
                    <div className="flex items-center space-x-1">
                        <button
                            onClick={() => handlePageChange(1)}
                            disabled={currentPage === 1}
                            className={`px-3 py-1 rounded ${currentPage === 1
                                ? "bg-gray-200 text-gray-500 cursor-not-allowed"
                                : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                                }`}
                        >
                            ¬´
                        </button>
                        <button
                            onClick={() => handlePageChange(currentPage - 1)}
                            disabled={currentPage === 1}
                            className={`px-3 py-1 rounded ${currentPage === 1
                                ? "bg-gray-200 text-gray-500 cursor-not-allowed"
                                : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                                }`}
                        >
                            ‚Äπ
                        </button>

                        {/* C√°c n√∫t trang */}
                        {[...Array(totalPages).keys()].map((page) => {
                            const pageNumber = page + 1;
                            // Hi·ªÉn th·ªã c√°c trang ·ªü g·∫ßn trang hi·ªán t·∫°i
                            if (
                                pageNumber === 1 ||
                                pageNumber === totalPages ||
                                (pageNumber >= currentPage - 1 && pageNumber <= currentPage + 1)
                            ) {
                                return (
                                    <button
                                        key={pageNumber}
                                        onClick={() => handlePageChange(pageNumber)}
                                        className={`px-3 py-1 rounded ${currentPage === pageNumber
                                            ? "bg-blue-500 text-white"
                                            : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                                            }`}
                                    >
                                        {pageNumber}
                                    </button>
                                );
                            }
                            // Hi·ªÉn th·ªã d·∫•u ... ƒë·ªÉ th·ªÉ hi·ªán c√≥ c√°c trang b·ªã b·ªè qua
                            else if (
                                (pageNumber === currentPage - 2 && pageNumber > 1) ||
                                (pageNumber === currentPage + 2 && pageNumber < totalPages)
                            ) {
                                return <span key={pageNumber}>...</span>;
                            }
                            return null;
                        })}

                        <button
                            onClick={() => handlePageChange(currentPage + 1)}
                            disabled={currentPage === totalPages}
                            className={`px-3 py-1 rounded ${currentPage === totalPages
                                ? "bg-gray-200 text-gray-500 cursor-not-allowed"
                                : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                                }`}
                        >
                            ‚Ä∫
                        </button>
                        <button
                            onClick={() => handlePageChange(totalPages)}
                            disabled={currentPage === totalPages}
                            className={`px-3 py-1 rounded ${currentPage === totalPages
                                ? "bg-gray-200 text-gray-500 cursor-not-allowed"
                                : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                                }`}
                        >
                            ¬ª
                        </button>
                    </div>
                </div>
            )}

            {/* Modal Chi ti·∫øt ƒë∆°n h√†ng */}
            {isModalOpen && selectedOrder && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white p-6 rounded-lg shadow-lg max-w-3xl w-full max-h-[90vh] overflow-y-auto">
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-xl font-semibold">Chi ti·∫øt ƒë∆°n h√†ng #{selectedOrder.id}</h3>
                            <button
                                onClick={() => setIsModalOpen(false)}
                                className="text-gray-500 hover:text-gray-700 text-2xl"
                            >
                                √ó
                            </button>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h4 className="font-medium text-gray-700 mb-2">Th√¥ng tin ƒë∆°n h√†ng</h4>
                                <div className="space-y-2">
                                    <p>
                                        <span className="font-medium">Tr·∫°ng th√°i:</span>
                                        <span
                                            className={`ml-2 px-2 py-1 rounded-full text-sm ${selectedOrder.status === "COMPLETED"
                                                ? "bg-green-100 text-green-800"
                                                : selectedOrder.status === "PENDING"
                                                    ? "bg-yellow-100 text-yellow-800"
                                                    : selectedOrder.status === "CONFIRMED"
                                                        ? "bg-purple-100 text-purple-800"
                                                        : selectedOrder.status === "SHIPPED"
                                                            ? "bg-blue-100 text-blue-800"
                                                            : "bg-red-100 text-red-800"
                                                }`}
                                        >
                                            {getStatusText(selectedOrder.status)}
                                        </span>
                                    </p>
                                    <p><span className="font-medium">Ng√†y ƒë·∫∑t:</span> {new Date(selectedOrder.createdAt).toLocaleString('vi-VN')}</p>
                                    <p><span className="font-medium">T·ªïng ti·ªÅn:</span> <span className="font-medium text-green-600">{selectedOrder.totalPrice.toLocaleString()} VND</span></p>
                                    <p>
                                        <span className="font-medium">Thanh to√°n:</span>
                                        <span
                                            className={`ml-2 px-2 py-1 rounded-full text-xs border ${getPaymentStatusColor(selectedOrder.payment?.status)}`}
                                        >
                                            {getPaymentStatusText(selectedOrder.payment?.status)}
                                        </span>
                                    </p>
                                    <p><span className="font-medium">Ph∆∞∆°ng th·ª©c:</span> {formatPaymentMethod(selectedOrder.payment?.paymentMethod)}</p>
                                    {selectedOrder.payment?.transactionId && (
                                        <p><span className="font-medium">M√£ giao d·ªãch:</span> {selectedOrder.payment.transactionId}</p>
                                    )}
                                </div>
                            </div>

                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h4 className="font-medium text-gray-700 mb-2">Th√¥ng tin kh√°ch h√†ng</h4>
                                <div className="space-y-2">
                                    <p><span className="font-medium">H·ªç t√™n:</span> {selectedOrder.customer?.fullName || "N/A"}</p>
                                    <p><span className="font-medium">Email:</span> {selectedOrder.customer?.email || "N/A"}</p>
                                    <p><span className="font-medium">S·ªë ƒëi·ªán tho·∫°i:</span> {selectedOrder.shippingInfo?.phoneNumber || "Ch∆∞a c√≥ th√¥ng tin"}</p>
                                </div>
                            </div>
                        </div>

                        <div className="bg-gray-50 p-4 rounded-lg mb-6">
                            <h4 className="font-medium text-gray-700 mb-2">Th√¥ng tin giao h√†ng</h4>
                            <div className="space-y-2">
                                <p><span className="font-medium">ƒê·ªãa ch·ªâ giao h√†ng:</span> {selectedOrder.shippingInfo?.address || "Ch∆∞a c√≥ th√¥ng tin"}</p>
                                <p><span className="font-medium">ƒê∆°n v·ªã v·∫≠n chuy·ªÉn:</span> {selectedOrder.shippingInfo?.carrier || "Ch∆∞a c√≥ th√¥ng tin"}</p>
                                <p><span className="font-medium">Ghi ch√∫:</span> {selectedOrder.note || "Kh√¥ng c√≥ ghi ch√∫"}</p>
                            </div>
                        </div>

                        <div className="mb-6">
                            <h4 className="font-medium text-gray-700 mb-3">Danh s√°ch s·∫£n ph·∫©m</h4>
                            <div className="bg-gray-50 rounded-lg overflow-hidden">
                                <table className="min-w-full">
                                    <thead className="bg-gray-100">
                                        <tr>
                                            <th className="px-4 py-2 text-left text-sm font-medium text-gray-600">S·∫£n ph·∫©m</th>
                                            <th className="px-4 py-2 text-center textscaled-sm font-medium text-gray-600">S·ªë l∆∞·ª£ng</th>
                                            <th className="px-4 py-2 text-right text-sm font-medium text-gray-600">ƒê∆°n gi√°</th>
                                            <th className="px-4 py-2 text-right text-sm font-medium text-gray-600">Th√†nh ti·ªÅn</th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {selectedOrder?.orderDetails?.length > 0 ? (
                                            selectedOrder.orderDetails.map((detail) => (
                                                <tr key={detail.id} className="hover:bg-gray-100">
                                                    <td className="px-4 py-3">
                                                        <div className="flex items-center">
                                                            <img
                                                                src={detail.productImage || "/placeholder-image.jpg"}
                                                                alt={detail.productName || "S·∫£n ph·∫©m"}
                                                                className="w-12 h-12 object-cover rounded border"
                                                                onError={(e) => {
                                                                    e.target.src = "/placeholder-image.jpg";
                                                                }}
                                                            />
                                                            <div className="ml-3">
                                                                <p className="font-medium">{detail.productName || "N/A"}</p>
                                                                <p className="text-xs text-gray-500">M√£ SP: {detail.productId || "N/A"}</p>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td className="px-4 py-3 text-center">{detail.quantity || 0}</td>
                                                    <td className="px-4 py-3 text-right">{detail.price ? detail.price.toLocaleString() : "0"} VND</td>
                                                    <td className="px-4 py-3 text-right font-medium">
                                                        {(detail.quantity && detail.price) ? (detail.quantity * detail.price).toLocaleString() : "0"} VND
                                                    </td>
                                                </tr>
                                            ))
                                        ) : (
                                            <tr>
                                                <td colSpan="4" className="px-4 py-3 text-center text-gray-500">
                                                    Kh√¥ng c√≥ s·∫£n ph·∫©m trong ƒë∆°n h√†ng
                                                </td>
                                            </tr>
                                        )}
                                    </tbody>
                                    <tfoot className="bg-gray-50">
                                        <tr>
                                            <td colSpan="3" className="px-4 py-3 text-right font-medium">T·ªïng gi√° tr·ªã:</td>
                                            <td className="px-4 py-3 text-right font-medium text-green-600">{selectedOrder.totalPrice.toLocaleString()} VND</td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>

                        <div className="flex justify-between mt-6">
                            <div className="flex space-x-2 flex-wrap gap-2">
                                <button
                                    onClick={() => {
                                        if (selectedOrder.status === "CANCELLED") {
                                            toast.warn("ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
                                            return;
                                        }
                                        handleUpdateStatus(selectedOrder.id, "PENDING");
                                    }}
                                    className="px-3 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                                    disabled={selectedOrder.status === "CANCELLED"}
                                    title={selectedOrder.status === "CANCELLED" ? "ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i" : ""}
                                >
                                    ƒêang x·ª≠ l√Ω
                                </button>
                                <button
                                    onClick={() => {
                                        if (selectedOrder.status === "CANCELLED") {
                                            toast.warn("ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
                                            return;
                                        }
                                        handleUpdateStatus(selectedOrder.id, "CONFIRMED");
                                    }}
                                    className="px-3 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                                    disabled={selectedOrder.status === "CANCELLED"}
                                    title={selectedOrder.status === "CANCELLED" ? "ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i" : ""}
                                >
                                    ƒê√£ x√°c nh·∫≠n
                                </button>
                                <button
                                    onClick={() => {
                                        if (selectedOrder.status === "CANCELLED") {
                                            toast.warn("ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
                                            return;
                                        }
                                        handleUpdateStatus(selectedOrder.id, "SHIPPED");
                                    }}
                                    className="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                                    disabled={selectedOrder.status === "CANCELLED"}
                                    title={selectedOrder.status === "CANCELLED" ? "ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i" : ""}
                                >
                                    ƒêang giao
                                </button>
                                <button
                                    onClick={() => {
                                        if (selectedOrder.status === "CANCELLED") {
                                            toast.warn("ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
                                            return;
                                        }
                                        handleUpdateStatus(selectedOrder.id, "COMPLETED");
                                    }}
                                    className="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                                    disabled={selectedOrder.status === "CANCELLED"}
                                    title={selectedOrder.status === "CANCELLED" ? "ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i" : ""}
                                >
                                    ƒê√£ giao
                                </button>
                                <button
                                    onClick={() => {
                                        if (selectedOrder.status === "CANCELLED") {
                                            toast.warn("ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
                                            return;
                                        }
                                        handleUpdateStatus(selectedOrder.id, "CANCELLED");
                                    }}
                                    className="px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                                    disabled={selectedOrder.status === "CANCELLED"}
                                    title={selectedOrder.status === "CANCELLED" ? "ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i" : ""}
                                >
                                    H·ªßy ƒë∆°n
                                </button>

                                {/* N√∫t xu·∫•t h√≥a ƒë∆°n trong modal */}
                                <ExportBillButton
                                    order={selectedOrder}
                                    variant="outline"
                                    size="medium"
                                />
                            </div>
                            <button
                                onClick={() => setIsModalOpen(false)}
                                className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
                            >
                                ƒê√≥ng
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Th√¥ng b√°o */}
            <ToastContainer
                position="top-right"
                autoClose={3000}
                hideProgressBar={false}
                newestOnTop
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
            />
        </div>
    );
};

export default OrderManagement;