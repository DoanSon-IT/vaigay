import React, { useState, useEffect, useContext } from "react";
import apiSupplier from "../../api/apiSupplier";
import AppContext from "../../context/AppContext";
import { useNavigate } from "react-router-dom";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Button, Table, Modal, Input, Form, Spin } from "antd";

const SupplierManagement = () => {
    const { auth } = useContext(AppContext);
    const navigate = useNavigate();
    const [suppliers, setSuppliers] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingSupplier, setEditingSupplier] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [tableLoading, setTableLoading] = useState(false);
    const [form] = Form.useForm();

    useEffect(() => {
        if (!auth) {
            toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y!");
            navigate("/login");
            return;
        }

        const hasAdminRole = auth.roles?.includes("ADMIN") || auth.roles?.includes("ROLE_ADMIN");
        if (!hasAdminRole) {
            toast.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!");
            navigate("/");
            return;
        }

        fetchSuppliers();
    }, [auth, navigate]);

    const fetchSuppliers = async () => {
        setTableLoading(true);
        try {
            const data = await apiSupplier.getSuppliers();
            setSuppliers(Array.isArray(data) ? data : []);
        } catch (error) {
            toast.error(error.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√† cung c·∫•p");
        } finally {
            setTableLoading(false);
        }
    };

    const handleAddOrEdit = async (values) => {
        setIsLoading(true);
        try {
            if (editingSupplier) {
                const updated = await apiSupplier.updateSupplier(editingSupplier.id, values);
                toast.success("C·∫≠p nh·∫≠t nh√† cung c·∫•p th√†nh c√¥ng!");
            } else {
                const created = await apiSupplier.createSupplier(values);
                toast.success("Th√™m nh√† cung c·∫•p th√†nh c√¥ng!");
            }
            setIsModalOpen(false);
            form.resetFields();
            fetchSuppliers();
        } catch (error) {
            toast.error(error.message || "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu");
        } finally {
            setIsLoading(false);
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√† cung c·∫•p n√†y?")) {
            setTableLoading(true);
            try {
                await apiSupplier.deleteSupplier(id);
                toast.success("X√≥a nh√† cung c·∫•p th√†nh c√¥ng!");
                fetchSuppliers();
            } catch (error) {
                toast.error(error.message || "C√≥ l·ªói x·∫£y ra khi x√≥a nh√† cung c·∫•p");
            } finally {
                setTableLoading(false);
            }
        }
    };

    const columns = [
        { title: "ID", dataIndex: "id", key: "id" },
        { title: "T√™n", dataIndex: "name", key: "name" },
        { title: "Email", dataIndex: "email", key: "email" },
        { title: "S·ªë ƒëi·ªán tho·∫°i", dataIndex: "phone", key: "phone" },
        { title: "ƒê·ªãa ch·ªâ", dataIndex: "address", key: "address" },
        {
            title: "H√†nh ƒë·ªông",
            key: "actions",
            render: (_, record) => (
                <div className="flex gap-2">
                    <Button onClick={() => openEditModal(record)}>‚úèÔ∏è S·ª≠a</Button>
                    <Button danger onClick={() => handleDelete(record.id)}>üóëÔ∏è X√≥a</Button>
                </div>
            ),
        },
    ];

    const openEditModal = (supplier) => {
        setEditingSupplier(supplier);
        form.setFieldsValue(supplier);
        setIsModalOpen(true);
    };

    const openAddModal = () => {
        setEditingSupplier(null);
        form.resetFields();
        setIsModalOpen(true);
    };

    return (
        <div className="p-6">
            <h2 className="text-xl font-bold mb-4">Qu·∫£n l√Ω Nh√† Cung C·∫•p</h2>
            <Button type="primary" onClick={openAddModal} className="mb-4">
                ‚ûï Th√™m Nh√† Cung C·∫•p
            </Button>

            <Table
                dataSource={suppliers}
                columns={columns}
                rowKey="id"
                loading={tableLoading}
            />

            <Modal
                title={editingSupplier ? "Ch·ªânh s·ª≠a Nh√† Cung C·∫•p" : "Th√™m Nh√† Cung C·∫•p"}
                open={isModalOpen}
                onCancel={() => setIsModalOpen(false)}
                onOk={() => form.submit()}
                confirmLoading={isLoading}
                maskClosable={false}
            >
                <Form form={form} layout="vertical" onFinish={handleAddOrEdit}>
                    <Form.Item
                        name="name"
                        label="T√™n"
                        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n!" }]}
                    >
                        <Input />
                    </Form.Item>
                    <Form.Item
                        name="email"
                        label="Email"
                        rules={[
                            { required: true, message: "Vui l√≤ng nh·∫≠p email!" },
                            { type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" },
                        ]}
                    >
                        <Input />
                    </Form.Item>
                    <Form.Item
                        name="phone"
                        label="S·ªë ƒëi·ªán tho·∫°i"
                        rules={[
                            { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" },
                            { pattern: /^(0|\+84)[3-9][0-9]{8}$/, message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 ho·∫∑c +84, ƒë·∫ßu s·ªë t·ª´ 3-9, v√† c√≥ 10 ch·ªØ s·ªë!" }
                        ]}
                    >
                        <Input />
                    </Form.Item>
                    <Form.Item
                        name="address"
                        label="ƒê·ªãa ch·ªâ"
                        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!" }]}
                    >
                        <Input />
                    </Form.Item>
                </Form>
            </Modal>
            <ToastContainer />
        </div>
    );
};

export default SupplierManagement;