import React, { useState, useEffect } from "react";
import { NavLink, useLocation, useNavigate } from "react-router-dom";
import { forgotPassword } from "@/api/apiAuth";
import axiosInstance from "@/api/axiosConfig";
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, Typography } from "@mui/material";

const ForgotPassword = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const query = new URLSearchParams(location.search);
    const token = query.get("token");

    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [error, setError] = useState("");
    const [message, setMessage] = useState("");
    const [showSuccessDialog, setShowSuccessDialog] = useState(false);
    const [showResetSuccess, setShowResetSuccess] = useState(false);

    useEffect(() => {
        if (token) setMessage("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i!");
    }, [token]);

    useEffect(() => {
        if (showResetSuccess) {
            const timeout = setTimeout(() => navigate("/auth/login"), 3000);
            return () => clearTimeout(timeout);
        }
    }, [showResetSuccess, navigate]);

    const validateEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

    const validatePassword = (pwd) => /^(?=.*[A-Za-z])(?=.*\d).{6,}$/.test(pwd);

    const handleForgot = async (e) => {
        e.preventDefault();
        if (!validateEmail(email)) {
            setError("Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!");
            return;
        }
        try {
            const response = await forgotPassword(email);
            setMessage(response.message || "H∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
            setError("");
            setShowSuccessDialog(true);
        } catch (error) {
            setError(error.message || "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i.");
        }
    };

    const handleReset = async (e) => {
        e.preventDefault();
        if (!validatePassword(password)) {
            setError("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±, g·ªìm ch·ªØ v√† s·ªë!");
            return;
        }
        if (password !== confirmPassword) {
            setError("X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
            return;
        }
        try {
            const res = await axiosInstance.post("/auth/reset-password", {
                token,
                newPassword: password,
            });
            setMessage(res.data.message || "‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!");
            setError("");
            setShowResetSuccess(true);
        } catch (err) {
            setError(err.response?.data?.message || "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#1A1A2E] via-[#16213E] to-[#0F3460] relative overflow-hidden px-4 transition-all duration-500">
            <div
                className="absolute inset-0 bg-cover bg-center opacity-90"
                style={{
                    backgroundImage: 'linear-gradient(to bottom, rgba(0,0,0,0.2), rgba(0,0,0,0.2)), url("/background_auth.png")',
                    backgroundPosition: "center",
                    backgroundSize: "cover",
                }}
            ></div>

            <div className="relative z-10 w-full max-w-6xl grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
                <div className="text-white px-4 animate-fade-in">
                    <div className="flex items-center mb-4">
                        <img src="/DS.png" alt="Logo" className="w-10 h-10 mr-2" />
                        <h1 className="text-2xl font-bold">Doan Son Store</h1>
                    </div>
                    <h2 className="text-4xl font-extrabold mb-4">
                        {token ? "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u" : "Kh√¥i ph·ª•c m·∫≠t kh·∫©u"}
                    </h2>
                    <p className="text-gray-300 max-w-md mb-6">
                        {token
                            ? "Nh·∫≠p m·∫≠t kh·∫©u m·ªõi ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng t√†i kho·∫£n."
                            : "Nh·∫≠p email ƒë·ªÉ nh·∫≠n h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u."}
                    </p>
                </div>

                <div className="w-full px-4 animate-slide-in-right">
                    <div className="bg-white/10 backdrop-blur-lg rounded-2xl shadow-2xl border border-white/20 p-8">
                        <h2 className="text-3xl font-bold text-white text-center mb-6">
                            {token ? "T·∫°o m·∫≠t kh·∫©u m·ªõi" : "Kh√¥i ph·ª•c m·∫≠t kh·∫©u"}
                        </h2>

                        {error && <div className="text-red-400 text-sm text-center mb-2">{error}</div>}
                        {message && <div className="text-green-400 text-sm text-center mb-2">{message}</div>}

                        {!token ? (
                            <form onSubmit={handleForgot} className="space-y-4">
                                <input
                                    type="email"
                                    placeholder="Email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    className="w-full bg-white/10 backdrop-blur-lg border border-white/20 rounded-lg py-3 px-4 text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                />
                                <button
                                    type="submit"
                                    className="w-full bg-black text-white py-3 rounded-lg hover:bg-gray-800 transition-colors"
                                >
                                    G·ª≠i y√™u c·∫ßu
                                </button>
                                <div className="text-center mt-4 text-gray-300">
                                    Quay l·∫°i {" "}
                                    <NavLink to="/auth/login" className="text-white-200 hover:underline">
                                        ƒêƒÉng nh·∫≠p
                                    </NavLink>
                                </div>
                            </form>
                        ) : showResetSuccess ? (
                            <div className="text-center text-white space-y-4">
                                <h3 className="text-2xl font-semibold">‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!</h3>
                                <p>B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p trong gi√¢y l√°t...</p>
                                <Button variant="outlined" color="inherit" onClick={() => navigate("/auth/login")}>V·ªÅ trang ƒëƒÉng nh·∫≠p</Button>
                            </div>
                        ) : (
                            <form onSubmit={handleReset} className="space-y-4">
                                <input
                                    type="password"
                                    placeholder="M·∫≠t kh·∫©u m·ªõi"
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    className="w-full bg-white/10 backdrop-blur-lg border border-white/20 rounded-lg py-3 px-4 text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                                    required
                                />
                                <input
                                    type="password"
                                    placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                                    value={confirmPassword}
                                    onChange={(e) => setConfirmPassword(e.target.value)}
                                    className="w-full bg-white/10 backdrop-blur-lg border border-white/20 rounded-lg py-3 px-4 text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                                    required
                                />
                                <button
                                    type="submit"
                                    className="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors"
                                >
                                    ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
                                </button>
                            </form>
                        )}
                    </div>
                </div>
            </div>

            <Dialog open={showSuccessDialog} onClose={() => setShowSuccessDialog(false)}>
                <DialogTitle>üìß G·ª≠i y√™u c·∫ßu th√†nh c√¥ng</DialogTitle>
                <DialogContent>
                    <Typography variant="body2" sx={{ mt: 2 }}>
                        Ch√∫ng t√¥i ƒë√£ g·ª≠i m·ªôt email h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn ƒë·ªãa ch·ªâ b·∫°n cung c·∫•p.<br />
                        Vui l√≤ng m·ªü Gmail v√† l√†m theo h∆∞·ªõng d·∫´n trong th∆∞.<br />
                        N·∫øu kh√¥ng th·∫•y email, h√£y ki·ªÉm tra th∆∞ m·ª•c <strong>Spam / Qu·∫£ng c√°o</strong>.
                    </Typography>
                </DialogContent>
                <DialogActions>
                    <Button variant="contained" color="primary" onClick={() => window.open("https://mail.google.com", "_blank")}>M·ªü Gmail</Button>
                    <Button onClick={() => setShowSuccessDialog(false)}>ƒê√≥ng</Button>
                </DialogActions>
            </Dialog>
        </div>
    );
};

export default ForgotPassword;
